/*
A MOF 2 Java -- The MOF Repository tool for Java
Copyright (C) 2005 Markus Scheidgen

    This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by the
Free Software Foundation; either version 2.1 of the License, or any later
version.

    This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

    You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
*/

package hub.sam.mof.xmi;

import java.util.*;
import hub.sam.mof.instancemodel.*;
import hub.sam.mof.xmi.mopa.*;

public class XmiUnisysUML1ToMOF2 {
	
	private ClassInstance<XmiClassifier,String,String> getInstanceValue(ClassInstance<XmiClassifier,String,String> from, String key, int index) {
		return (ClassInstance)from.get(key).getValues().get(index).asInstanceValue().getInstance();
	}

	private String getUnspecifiedValue(ClassInstance<XmiClassifier,String,String> from, String key, int index) {
        try {
    		return (String)from.get(key).getValues().get(index).asUnspecifiedValue().getUnspecifiedData();
        } catch (NullPointerException e) {
            return null;
        }
	}
	
	private void removeAttribute(ClassInstance<XmiClassifier,String,String> from, String attr) {
		if (from.get(attr) != null) {
			from.get(attr).getValues().remove(0);
		}
	}

	private final InstanceModel<XmiClassifier,String,String> model;
	private List<ClassInstance<XmiClassifier,String,String> > tlElements = null;
	
	public XmiUnisysUML1ToMOF2(InstanceModel<XmiClassifier,String,String> model) {
		this.model = model;
        this.tlElements = new Vector();
		for(ClassInstance<XmiClassifier,String,String> instance: model.getInstances()) {
			instance.getClassifier().setNamespacePrefix("cmof");
		}
	}

    public Collection<ClassInstance<XmiClassifier,String,String> > getTopLevelElements() {
        return tlElements;
    }
	
    public pattern void transform() throws XmiException {
        m=Model(dt=DataType) -> {
            m.get("ownedElement").getValues().remove(dt);
            tlElements.add(dt);
        }
        
        Model -> {
        	dive;
        	if (tlElements.size() == 0) {
        		throw new XmiException("Xmi does not contain a meta-model");
        	}
        }

        p=Package(s=Stereotype) provided (!getUnspecifiedValue(s,"name",0).equals("metamodel")) -> {
    		p.get("ownedElement").getValues().remove(model.createInstanceValue(s));

            if (getUnspecifiedValue(s, "name", 0).equals("enumeration")) {
                String ids = getUnspecifiedValue(s,"extendedElement",0);
                if (ids.contains(" ")) {
                    for (String id: ids.split(" ")) {
                        model.getInstance(id).getClassifier().setName("Enumeration");
                    }
                } else {
                    model.getInstance(ids).getClassifier().setName("Enumeration");
                }
            }
        }
        
        p=Package(s=Stereotype) provided (getUnspecifiedValue(s,"name",0).equals("metamodel"))-> {
    		p.get("ownedElement").getValues().remove(model.createInstanceValue(s));    	

			removeAttribute(p, "visibility");		
			removeAttribute(p, "isSpecification");
			removeAttribute(p, "namespace");
			removeAttribute(p, "isAbstract");
			removeAttribute(p, "isLeaf");
			removeAttribute(p, "isRoot");
            removeAttribute(p, "clientDependency");
            removeAttribute(p, "supplierDependency");

			dive;						
			tlElements.add(p);
        }

        p=Package(e=ownedElement:Association.Class.DataType.Enumeration) -> {
        	p.get("ownedElement").getValues().remove(model.createInstanceValue(e));    	
        	p.addValue("ownedType", model.createInstanceValue(e));
        }
        
        p=Package(constraint=Constraint) -> {
        	p.get("ownedElement").getValues().remove(model.createInstanceValue(constraint));    	
        }

        p=Package(depend=Dependency) -> {
            p.get("ownedElement").getValues().remove(model.createInstanceValue(depend));
        }

        a=Association (end1=connection:AssociationEnd, end2=connection:AssociationEnd) provided (end1 != end2) -> {
        	InstanceValue<XmiClassifier,String,String> end1Value = model.createInstanceValue(end1);
        	InstanceValue<XmiClassifier,String,String> end2Value = model.createInstanceValue(end2);
        	
        	end1.addValue("opposite", end2Value);
        	end2.addValue("opposite", end1Value);
        	a.addValue("memberEnd", end1Value);
           	a.addValue("memberEnd", end2Value);
			dive;
			a.get("connection").getValues().remove(end1Value);
			a.get("connection").getValues().remove(end2Value);

            removeAttribute(a, "isLeaf");
            removeAttribute(a, "isRoot");
            removeAttribute(a, "isAbstract");
            removeAttribute(a, "isSpecification");
            
			break pattern;
        }        
        
        property=AssociationEnd.Attribute(m=Multiplicity(range=MultiplicityRange)) -> {
        	property.addValue("upper", range.get("upper").getValues().get(0));
        	property.addValue("lower", range.get("lower").getValues().get(0));
        	property.get("multiplicity").getValues().remove(0);
        }        

        property=Attribute(expr=initialValue:Expression) -> {
            String body = getUnspecifiedValue(expr, "body", 0);
            if (! new String("").equals(body) && body != null) {
                property.addValue("default", model.createPrimitiveValue(body));
            }
            removeAttribute(property, "initialValue");
        }

        property=AssociationEnd -> {
			boolean isNavigable = false;
			if (property.get("isNavigable") != null) {
				isNavigable = Boolean.TRUE.toString().equals(getUnspecifiedValue(property,"isNavigable",0));
			}

        	if (!isNavigable) {
      			ClassInstance<XmiClassifier,String,String> association = (ClassInstance)mopaNode.getParent().getElement();
      			association.addValue("ownedEnd", model.createInstanceValue(property));
      			property.changeComposite(association);
        	} else {
        		ClassInstance<XmiClassifier,String,String> theClass = 
                        model.getInstance(getUnspecifiedValue(getInstanceValue(property, "opposite", 0), "type", 0));
        		theClass.addValue("ownedAttribute", model.createInstanceValue(property));
        		property.changeComposite(theClass);
        	}
        }
        
        property=AssociationEnd.Attribute -> {
        	property.getClassifier().setName("Property");			
        	
        	if (new String("ordered").equals(getUnspecifiedValue(property, "ordering", 0))) {
        		property.addValue("isOrdered", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}         	
        	if (new String("composite").equals(getUnspecifiedValue(property, "aggregation", 0))) {
        		getInstanceValue(property, "opposite", 0).addValue("isComposite", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}
        	if (new String("unchangeable").equals(getUnspecifiedValue(property, "changeability", 0))) {
        		property.addValue("isReadOnly", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}

            String name = getUnspecifiedValue(property, "name", 0);
            if (name.startsWith("/")) {
                property.addValue("isDerived", model.createPrimitiveValue(Boolean.TRUE.toString()));
                removeAttribute(property, "name");
                property.addValue("name", model.createPrimitiveValue(name.substring(1, name.length())));
            }
        }

        feature=Property.Operation -> {
			removeAttribute(feature, "ordering");        	
			removeAttribute(feature, "aggregation");
			removeAttribute(feature, "visibility");
			removeAttribute(feature, "targetScope");
			removeAttribute(feature, "ownerScope");
			removeAttribute(feature, "constraint");
			removeAttribute(feature, "changeability");
			removeAttribute(feature, "isSpecification");
            removeAttribute(feature, "isNavigable");
            removeAttribute(feature, "isQuery");
            removeAttribute(feature, "concurrency");
            removeAttribute(feature, "isAbstract");
            removeAttribute(feature, "specification");
            removeAttribute(feature, "isRoot");
            removeAttribute(feature, "isLeaf");
			dive;
        }

        op=Operation(param=parameter:Parameter) -> {
            op.get("parameter").getValues().remove(model.createInstanceValue(param));
            if (new String("return").equals(getUnspecifiedValue(param, "kind", 0))) {
                op.addValue("returnResult", model.createInstanceValue(param));
            } else {
                op.addValue("formalParameter", model.createInstanceValue(param));
            }
			removeAttribute(param, "visibility");
			removeAttribute(param, "isSpecification");
            removeAttribute(param, "kind");
        }
        
        constraint=Constraint(expr=BooleanExpression) -> {
            String ids = getUnspecifiedValue(constraint,"constrainedElement",0);
            if (ids.contains(" ")) {
                for (String id: ids.split(" ")) {
                    model.getInstance(id).addValue("details", 
                            expr.get("body").getValues().get(0));
                }
            } else {
                model.getInstance(ids).addValue("details", 
                        expr.get("body").getValues().get(0));
            }
        }
        
        theClass=Class(generalisation=Generalization) -> {
            String ids = getUnspecifiedValue(generalisation, "parent", 0);
            if (ids.contains(" ")) {
                for(String id: ids.split(" ")) {
                    theClass.addValue("superClass", model.createInstanceValue(model.getInstance(id)));
                }
            } else {
                theClass.addValue("superClass", model.createInstanceValue(model.getInstance(ids)));
            }
            theClass.get("ownedElement").getValues().remove(model.createInstanceValue(generalisation));
        }

        theClass=Class.DataType(attribute=Attribute) -> {
            theClass.get("feature").getValues().remove(model.createInstanceValue(attribute));    
            theClass.addValue("ownedAttribute", model.createInstanceValue(attribute));
        }

        enumeration=Enumeration(attr=feature:Attribute) -> {
            enumeration.get("feature").getValues().remove(model.createInstanceValue(attr));
            ClassInstance<XmiClassifier,String,String> literal = model.createInstance(null, 
                    new XmiClassifier("EnumerationLiteral", "cmof"), enumeration);
            enumeration.addValue("ownedLiteral", model.createInstanceValue(literal));
            literal.addValue("name", model.createPrimitiveValue(getUnspecifiedValue(attr, "name", 0)));
        }


        theClass=Class.DataType.Enumeration -> {
			removeAttribute(theClass, "visibility");		
			removeAttribute(theClass, "isSpecification");
			removeAttribute(theClass, "isActive");
			removeAttribute(theClass, "namespace");
			removeAttribute(theClass, "isLeaf");
			removeAttribute(theClass, "isRoot");            
			removeAttribute(theClass, "specialization");            
			removeAttribute(theClass, "generalization");            
            removeAttribute(theClass, "clientDependency");
            removeAttribute(theClass, "supplierDependency");
            dive;
        }

        theClass=Class(op=feature:Operation) -> {
            theClass.get("feature").getValues().remove(model.createInstanceValue(op));    
            theClass.addValue("ownedOperation", model.createInstanceValue(op));
            
        }

        dt=DataType -> {
            String name = getUnspecifiedValue(dt, "name", 0);
            if (new String("String").equals(name) ||
                    new String("Boolean").equals(name) ||
                    new String("Integer").equals(name) ||
                    new String("UnlimitedNatural").equals(name)) {
                dt.getClassifier().setName("PrimitiveType");        
            }
        }

        default -> {        	
        }
    }
}
