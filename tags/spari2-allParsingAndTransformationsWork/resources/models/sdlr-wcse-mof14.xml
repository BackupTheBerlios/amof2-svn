<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<XMI xmi.version = '1.2' xmlns:Model = 'org.omg.xmi.namespace.Model' timestamp = 'Fri Feb 24 10:57:38 CET 2006'>
  <XMI.header>
    <XMI.documentation>
      <XMI.exporter>Netbeans XMI Writer</XMI.exporter>
      <XMI.exporterVersion>1.0</XMI.exporterVersion>
    </XMI.documentation>
  </XMI.header>
  <XMI.content>
    <Model:Package xmi.id = 'a1' name = 'Common' annotation = '' isRoot = 'false'
      isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Tag xmi.id = 'a2' name = 'org.omg.mof.idl_prefix=' annotation = ''
          tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values></Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a3' name = 'com.urep.jcr.javax.jmi.packagePrefix='
          annotation = '' tagId = 'com.urep.jcr.javax.jmi.packagePrefix'>
          <Model:Tag.values></Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a4' name = 'NamedElement' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a5'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a6' name = 'name' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a7'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a8' name = 'qualifiedName' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a7'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Constraint xmi.id = 'a5' name = 'NamesMustNotBeUsedTwice' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  NamedElement&#10;&#10;inv:  container-&gt;isEmpty or (container.oclIsKindOf(Namespace) implies container.contents-&gt;forAll(e|         e.oclAsType(NamedElement).name = self.name implies e = self))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a4'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Import xmi.id = 'a10' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a12' name = 'Namespace' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a13'/>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a14' name = 'GeneralizableElement' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a15' name = 'supertype' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a14'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a16'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a12'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a17' name = 'TypedElement' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
            <Model:Class xmi.idref = 'a18'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a19' name = 'BodiedElement' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a20' name = 'body' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a9'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a21'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a22' name = 'ParameterizedElement' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a12'/>
            <Model:Class xmi.idref = 'a23'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a9' name = 'ModelElement' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a24' name = 'container' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a13'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a25'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a26' name = 'bodiedElement' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a19'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a27'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a29' name = 'com.urep.jcr.transient=true' annotation = ''
          tagId = 'com.urep.jcr.transient'>
          <Model:Tag.values>true</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a9'/>
            <Model:Class xmi.idref = 'a30'/>
            <Model:Class xmi.idref = 'a13'/>
            <Model:Class xmi.idref = 'a18'/>
            <Model:Class xmi.idref = 'a23'/>
            <Model:Class xmi.idref = 'a31'/>
            <Model:Class xmi.idref = 'a32'/>
            <Model:Class xmi.idref = 'a33'/>
            <Model:Class xmi.idref = 'a34'/>
            <Model:Class xmi.idref = 'a35'/>
            <Model:Class xmi.idref = 'a36'/>
            <Model:Class xmi.idref = 'a37'/>
            <Model:Class xmi.idref = 'a38'/>
            <Model:Class xmi.idref = 'a39'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a30' name = 'Parameter' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a13' name = 'Container' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a40' name = 'contents' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a9'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a41'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a18' name = 'TypeReference' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a42' name = 'type' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a4'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a43'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a23' name = 'SignaturedElement' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a44' name = 'parameters' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a18'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a45'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a13'/>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a31' name = 'Classifier' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a46' name = 'interfaces' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a38'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a48' name = 'thisInterfaces' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a12'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a32' name = 'Instance' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a50' name = 'interfaces' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a51'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a33' name = 'Interface' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a52'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a53' name = 'toMedia' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a54'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a55' name = 'fromMedia' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a56'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Attribute xmi.id = 'a57' name = 'isPositive' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a58'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Constraint xmi.id = 'a52' name = 'InterfaceApplicability' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  Interface&#10;&#10;inv:  self.isPositive implies type.oclAsType(InterfaceType).send-&gt;forAll(item|         self.toMedia-&gt;exists(media|media.items-&gt;includes(item)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a33'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a18'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a34' name = 'Sink' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a59' name = 'items' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a60'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
            <Model:Class xmi.idref = 'a39'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a35' name = 'Source' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a61' name = 'items' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a62'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
            <Model:Class xmi.idref = 'a39'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a36' name = 'Media' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a63'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a64' name = 'source' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a65'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a66' name = 'sink' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a67'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a68' name = 'items' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a69'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a63' name = 'InterfaceUseability' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  Media&#10;&#10;inv:  items-&gt;forAll(item| (self.sink.isPositive implies self.sink.type.oclAsType(InterfaceType).receive-&gt;includes(item)) or ((not self.sink.isPositive) implies self.sink.type.oclAsType(InterfaceType).send-&gt;includes(item)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a36'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a37' name = 'ComItem' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a38' name = 'InterfaceType' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a70' name = 'receive' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a71'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a72' name = 'send' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a73'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a39' name = 'Feature' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Operation xmi.id = 'a74' name = 'determineClassifier' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isQuery = 'false'>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'a75' name = '*return' annotation = '' direction = 'return_dir'>
                  <Model:Parameter.multiplicity>
                    <XMI.field>1</XMI.field>
                    <XMI.field>1</XMI.field>
                    <XMI.field>false</XMI.field>
                    <XMI.field>false</XMI.field>
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Class xmi.idref = 'a31'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a76' name = 'Contains' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a41' name = 'contents' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a9'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a25' name = 'container' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a13'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a77' name = 'GeneralizableElementSupertype'
          annotation = '' isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a16' name = 'supertype' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a78' name = 'specialtype' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a14'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a79' name = 'Type' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a43' name = 'type' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a4'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a80' name = 'instance' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a18'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a81' name = 'Bodied' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a21' name = 'body' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a9'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a27' name = 'bodiedElement' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a19'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a82' name = 'Signature' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a45' name = 'parameters' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a18'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a83' name = 'signaturedElement' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a23'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a84' name = 'InterfaceTypes' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47' name = 'interfaces' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a38'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a85' name = 'classifier' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a31'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a86' name = 'Interfaces' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a51' name = 'interfaces' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a87' name = 'instance' annotation = '' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a32'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a88' name = 'Entry' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a54' name = 'toMedia' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a65' name = 'source' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a89' name = 'Exit' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a67' name = 'sink' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a56' name = 'fromMedia' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a90' name = 'MediaFor' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a69' name = 'items' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a91' name = 'media' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a36'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a92' name = 'ReceiveItems' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a71' name = 'receive' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a93' name = 'interfaceType' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a38'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a94' name = 'SendItems' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a73' name = 'send' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a95' name = 'interfaceType' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a38'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a96' name = 'SinkData' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a60' name = 'items' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a97' name = 'sink' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a34'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a98' name = 'SourceData' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a62' name = 'items' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a37'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a99' name = 'source' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a35'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a100' name = 'ThisInterface' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49' name = 'thisInterfaces' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a33'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a101' name = 'classifier' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a31'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a102' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a103' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a28' name = 'ContextedElement' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a104' name = 'line' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a105'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a106' name = 'column' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a105'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a107' name = 'CommonData' annotation = '' isRoot = 'false'
      isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Class xmi.id = 'a108' name = 'DataType' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a109' name = 'com.urep.jcr.transient=true' annotation = ''
          tagId = 'com.urep.jcr.transient'>
          <Model:Tag.values>true</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a108'/>
            <Model:Class xmi.idref = 'a110'/>
            <Model:Class xmi.idref = 'a111'/>
            <Model:Class xmi.idref = 'a112'/>
            <Model:Class xmi.idref = 'a113'/>
            <Model:Class xmi.idref = 'a114'/>
            <Model:Class xmi.idref = 'a115'/>
            <Model:Class xmi.idref = 'a116'/>
            <Model:Class xmi.idref = 'a117'/>
            <Model:Class xmi.idref = 'a118'/>
            <Model:Class xmi.idref = 'a119'/>
            <Model:Class xmi.idref = 'a120'/>
            <Model:Class xmi.idref = 'a121'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a110' name = 'Literal' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a122' name = 'dataType' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a112'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a123'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a111' name = 'Operation' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
            <Model:Class xmi.idref = 'a23'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a112' name = 'ValueDataType' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a124' name = 'literals' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a110'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a125'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a108'/>
            <Model:Class xmi.idref = 'a12'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a113' name = 'Expression' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a126' name = 'constant' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'false' isDerived = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a58'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Operation xmi.id = 'a127' name = 'determineType' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isQuery = 'false'>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'a128' name = '*return' annotation = '' direction = 'return_dir'>
                  <Model:Parameter.multiplicity>
                    <XMI.field>1</XMI.field>
                    <XMI.field>1</XMI.field>
                    <XMI.field>false</XMI.field>
                    <XMI.field>false</XMI.field>
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Class xmi.idref = 'a4'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Import xmi.id = 'a129' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a130' name = 'Common' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a114' name = 'Variable' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a131' name = 'initExpression' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a132'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a115' name = 'Assignment' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a133'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a134' name = 'variable' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a135'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a136' name = 'assignmentExpression' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a137'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a133' name = 'AssignmentTypeSafety' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  Assignment&#10;&#10;inv:  variable.type = assignmentExpression.determineType()'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a115'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a116' name = 'LiteralExpression' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a138' name = 'literal' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a110'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a139'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a117' name = 'VariableAccess' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a140' name = 'variable' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a141'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a118' name = 'OperationApplication' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a113'/>
            <Model:Class xmi.idref = 'a120'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a119' name = 'AnyExpression' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a120' name = 'ArgumentedElement' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a142'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a142' name = 'TypeSafety' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  ArgumentedElement&#10;&#10;inv:  not type.oclIsKindOf(SignaturedElement) or ( operands-&gt;size = type.oclAsType(SignaturedElement).parameters-&gt;size and (Sequence { 1 .. operands-&gt;size }-&gt;forAll(i | self.operands-&gt;at(i).determineType() =         self.type.oclAsType(SignaturedElement).parameters-&gt;at(i).type) or operands-&gt;size = 0))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a120'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a18'/>
            <Model:Class xmi.idref = 'a121'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a121' name = 'Operator' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a143' name = 'operands' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a144'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <Model:Association xmi.id = 'a145' name = 'Literals' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a123' name = 'dataType' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a112'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a125' name = 'literals' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a110'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a146' name = 'Initialisation' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a147' name = 'variableDefinition' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a132' name = 'initExpression' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a148' name = 'AssignTo' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a149' name = 'assignment' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a115'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a135' name = 'variable' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a150' name = 'AssignWith' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a151' name = 'assignment' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a115'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a137' name = 'assignmentExpression' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a152' name = 'AccessedVariable' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a153' name = 'access' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a117'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a141' name = 'variable' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a114'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a154' name = 'LiteralOfLiteralExpression' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a155' name = 'literalExpression' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a116'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a139' name = 'literal' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a110'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a156' name = 'Operands' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a157' name = 'operator' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a121'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a144' name = 'operands' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Tag xmi.id = 'a158' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a159' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a160' name = 'CommonBehaviour' annotation = ''
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Class xmi.id = 'a161' name = 'Action' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a162' name = 'com.urep.jcr.transient=true' annotation = ''
          tagId = 'com.urep.jcr.transient'>
          <Model:Tag.values>true</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a161'/>
            <Model:Class xmi.idref = 'a163'/>
            <Model:Class xmi.idref = 'a164'/>
            <Model:Class xmi.idref = 'a165'/>
            <Model:Class xmi.idref = 'a166'/>
            <Model:Class xmi.idref = 'a167'/>
            <Model:Class xmi.idref = 'a168'/>
            <Model:Class xmi.idref = 'a169'/>
            <Model:Class xmi.idref = 'a170'/>
            <Model:Class xmi.idref = 'a171'/>
            <Model:Class xmi.idref = 'a172'/>
            <Model:Class xmi.idref = 'a173'/>
            <Model:Class xmi.idref = 'a174'/>
            <Model:Class xmi.idref = 'a175'/>
            <Model:Class xmi.idref = 'a176'/>
            <Model:Class xmi.idref = 'a177'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a163' name = 'Answer' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a168'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a164' name = 'Guard' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a168'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a165' name = 'History' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a178' name = 'recursive' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a58'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a170'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Import xmi.id = 'a179' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a166' name = 'Join' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a167'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a167' name = 'PseudoState' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a171'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a168' name = 'Selector' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a180' name = 'transition' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a181'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a169' name = 'Split' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a182' name = 'question' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a113'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a167'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Import xmi.id = 'a183' name = 'CommonData' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a170' name = 'Start' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a171'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a171' name = 'State' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a184' name = 'entryActions' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a185'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a186' name = 'exitActions' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a187'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a188' name = 'selectors' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a168'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a189'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a172' name = 'StateAutomaton' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a190' name = 'transitions' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a191'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a13'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a173' name = 'Stop' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a167'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a174' name = 'Transition' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a192' name = 'actions' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a193'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a194' name = 'nextState' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a171'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a195'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a196' name = 'selector' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a168'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a197'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a175' name = 'Trigger' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a168'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a176' name = 'Imidiate' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a168'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a177' name = 'NamedState' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
            <Model:Class xmi.idref = 'a171'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a198' name = 'Actions' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a199' name = 'transition' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a193' name = 'actions' annotation = '' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a200' name = 'EntryActions' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a201' name = 'state' annotation = '' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a171'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a185' name = 'entryActions' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a202' name = 'ExitActions' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a203' name = 'state' annotation = '' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a171'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a187' name = 'exitActions' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a161'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a204' name = 'NextState' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a205' name = 'transition' annotation = ''
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a195' name = 'nextState' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a171'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a206' name = 'SelectorsOfState' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a207' name = 'state' annotation = '' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a171'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a189' name = 'selectors' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a168'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a208' name = 'TransitionSelector' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a197' name = 'selector' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a168'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a181' name = 'transition' annotation = ''
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a209' name = 'Transitions' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a191' name = 'transitions' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a174'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a210' name = 'automaton' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a172'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Import xmi.id = 'a211' name = 'Common' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Tag xmi.id = 'a212' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a160'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a213' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a160'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a214' name = 'SdlPlus' isRoot = 'false' isLeaf = 'false'
      isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Import xmi.id = 'a215' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a216' name = 'Common' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a217' name = 'CommonBehaviour' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a160'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a218' name = 'CommonData' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a219' name = 'SDLSpecification' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a220'/>
            <Model:Constraint xmi.idref = 'a221'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a220' name = 'SDLSpecificationMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SDLSpecification&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {PackageDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a219'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a221' name = 'SDLSpecificationBodyTypeMetaTypeMustBeAgentDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SDLSpecification&#10;&#10;inv:  self.body.oclIsKindOf(OclAny) implies Set {AgentDefinition}-&gt;exists(t:OclType|self.body.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a219'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a12'/>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a222' name = 'PackageDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a223'/>
            <Model:Constraint xmi.idref = 'a224'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a223' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  PackageDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a222'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a224' name = 'PackageDefinitionMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  PackageDefinition&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {AgentTypeDefinition, ProcedureDefinition, ValueDataTypeDefinition, SignalDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a222'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a12'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a225' name = 'AgentTypeDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a226'/>
            <Model:Constraint xmi.idref = 'a227'/>
            <Model:Constraint xmi.idref = 'a228'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a226' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  AgentTypeDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a225'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Attribute xmi.id = 'a229' name = 'kind' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a230'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Constraint xmi.id = 'a227' name = 'AgentTypeDefinitionBodyTypeMetaTypeMustBeStateMachineDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  AgentTypeDefinition&#10;&#10;inv:  self.body.oclIsKindOf(OclAny) implies Set {StateMachineDefinition}-&gt;exists(t:OclType|self.body.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a225'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a228' name = 'AgentTypeDefinitionMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  AgentTypeDefinition&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {AgentTypeDefinition, ProcedureDefinition, AgentDefinition, GateDefinition, ChannelDefinition, CompositeStateTypeDefinition, ValueDataTypeDefinition, SignalDefinition, TimerDefinition, VariableDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a225'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a31'/>
            <Model:Class xmi.idref = 'a19'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a230' name = 'AgentKind' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>BLOCK</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>SYSTEM</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>PROCESS</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Class xmi.id = 'a231' name = 'StateMachineDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a232'/>
            <Model:Constraint xmi.idref = 'a233'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a232' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  StateMachineDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a231'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a233' name = 'StateMachineDefinitionMustHaveCompositeStateTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateMachineDefinition&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {CompositeStateTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a231'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a32'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a234' name = 'CompositeStateTypeDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a235'/>
            <Model:Constraint xmi.idref = 'a236'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a235' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  CompositeStateTypeDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a234'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a236' name = 'CompositeStateTypeDefinitionBodyTypeMetaTypeMustBeStateTransitionGraph'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  CompositeStateTypeDefinition&#10;&#10;inv:  self.body.oclIsKindOf(OclAny) implies Set {StateTransitionGraph}-&gt;exists(t:OclType|self.body.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a234'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
            <Model:Class xmi.idref = 'a31'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a237' name = 'GateDefinition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a238'/>
            <Model:Constraint xmi.idref = 'a239'/>
            <Model:Constraint xmi.idref = 'a240'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a238' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  GateDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a237'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a239' name = 'GateDefinitionSendMustHaveSignalDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  GateDefinition&#10;&#10;inv:  self.send-&gt;forAll(e|Set {SignalDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a237'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a240' name = 'GateDefinitionReceiveMustHaveSignalDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  GateDefinition&#10;&#10;inv:  self.receive-&gt;forAll(e|Set {SignalDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a237'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a241' name = 'AgentDefinition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a242'/>
            <Model:Constraint xmi.idref = 'a243'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a242' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  AgentDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a241'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Attribute xmi.id = 'a244' name = 'initialNumber' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a105'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a245' name = 'gates' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a237'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Constraint xmi.id = 'a243' name = 'AgentDefinitionMustHaveAgentTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  AgentDefinition&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {AgentTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a241'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a32'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a246' name = 'SdlParameter' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a247'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a247' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  SdlParameter&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a246'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a30'/>
            <Model:Class xmi.idref = 'a248'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a249' name = 'ProcedureDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a250'/>
            <Model:Constraint xmi.idref = 'a251'/>
            <Model:Constraint xmi.idref = 'a252'/>
            <Model:Constraint xmi.idref = 'a253'/>
            <Model:Constraint xmi.idref = 'a254'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a250' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  ProcedureDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a249'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a251' name = 'ProcedureDefinitionMustHaveValueDataTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ProcedureDefinition&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ValueDataTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a249'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a252' name = 'ProcedureDefinitionMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ProcedureDefinition&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {ProcedureDefinition, ValueDataTypeDefinition, VariableDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a249'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a253' name = 'ProcedureDefinitionMustHaveDestinctParameterType'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ProcedureDefinition&#10;&#10;inv:  self.parameters-&gt;forAll(e|Set {ProcedureParameter}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a249'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a254' name = 'ProcedureDefinitionBodyTypeMetaTypeMustBeProcedureGraph'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ProcedureDefinition&#10;&#10;inv:  self.body.oclIsKindOf(OclAny) implies Set {ProcedureGraph}-&gt;exists(t:OclType|self.body.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a249'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a19'/>
            <Model:Class xmi.idref = 'a17'/>
            <Model:Class xmi.idref = 'a22'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a255' name = 'ProcedureParameter' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a256' name = 'kind' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a257'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a246'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a257' name = 'ProcedureParameterKind' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>InParameter</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>InoutParameter</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Class xmi.id = 'a258' name = 'ChannelDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a259'/>
            <Model:Constraint xmi.idref = 'a260'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a259' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  ChannelDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a258'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Attribute xmi.id = 'a261' name = 'NODELAY' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a58'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Constraint xmi.id = 'a260' name = 'ChannelDefinitionMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ChannelDefinition&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {ChannelPath}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a258'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a13'/>
            <Model:Class xmi.idref = 'a4'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a262' name = 'ChannelPath' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a263'/>
            <Model:Constraint xmi.idref = 'a264'/>
            <Model:Constraint xmi.idref = 'a265'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a263' name = 'ChannelPathSourceMustBeInterface'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ChannelPath&#10;&#10;inv:  self.source.oclIsKindOf(OclAny) implies Set {Interface}-&gt;exists(t:OclType|self.source.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a262'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a264' name = 'ChannelPathSinkMustBeInterface'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ChannelPath&#10;&#10;inv:  self.sink.oclIsKindOf(OclAny) implies Set {Interface}-&gt;exists(t:OclType|self.sink.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a262'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a265' name = 'ChannelPathItemsMustBeSignalDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ChannelPath&#10;&#10;inv:  self.items-&gt;forAll(e|Set {SignalDefinition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a262'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
            <Model:Class xmi.idref = 'a36'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a266' name = 'StateTransitionGraph' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a267'/>
            <Model:Constraint xmi.idref = 'a268'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a267' name = 'StateTransitionGraphMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateTransitionGraph&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {StateNode, StateStartNode, Connector, DecisionNode, Stop, ReturnNode}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a266'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a268' name = 'TransifitionsOfStateTransitionGraphMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateTransitionGraph&#10;&#10;inv:  self.transitions-&gt;forAll(e|Set {SdlTransition}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a266'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a172'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a269' name = 'ProcedureGraph' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a266'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a270' name = 'StateStartNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a271'/>
            <Model:Constraint xmi.idref = 'a272'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a271' name = 'StateStartNodeMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateStartNode&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a270'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a272' name = 'StateStartNodeMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateStartNode&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a270'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a170'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a273' name = 'StateNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a274'/>
            <Model:Constraint xmi.idref = 'a275'/>
            <Model:Constraint xmi.idref = 'a276'/>
            <Model:Constraint xmi.idref = 'a277'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a274' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  StateNode&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a273'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a275' name = 'StateNodeMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateNode&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a273'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a276' name = 'StateNodeMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateNode&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a273'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a277' name = 'SelectorsOfStateNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  StateNode&#10;&#10;inv:  self.selectors-&gt;forAll(e|Set {InputNode}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a273'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a177'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a278' name = 'InputNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a279'/>
            <Model:Constraint xmi.idref = 'a280'/>
            <Model:Constraint xmi.idref = 'a281'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a279' name = 'ArgumentsOfInputNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  InputNode&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlVariableAccess}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a278'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a280' name = 'InputNodeMustHaveSignalDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  InputNode&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {SignalDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a278'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a281' name = 'TransitionOfInputNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  InputNode&#10;&#10;inv:  self.transition.oclIsKindOf(OclAny) implies Set {SdlTransition}-&gt;exists(t:OclType|self.transition.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a278'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a175'/>
            <Model:Class xmi.idref = 'a34'/>
            <Model:Class xmi.idref = 'a120'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a282' name = 'Connector' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a283'/>
            <Model:Constraint xmi.idref = 'a284'/>
            <Model:Constraint xmi.idref = 'a285'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a283' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  Connector&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a282'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a284' name = 'ConnectorMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  Connector&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a282'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a285' name = 'ConnectorMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  Connector&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a282'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a177'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a286' name = 'SdlTransition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a287'/>
            <Model:Constraint xmi.idref = 'a288'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a287' name = 'NextStatesOfSdlTransitionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlTransition&#10;&#10;inv:  self.nextState.oclIsKindOf(OclAny) implies Set {StateNode, DashNextstate, Connector, ReturnNode, DecisionNode, Stop}-&gt;exists(t:OclType|self.nextState.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a286'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a288' name = 'ActionssOfSdlTransitionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlTransition&#10;&#10;inv:  self.actions-&gt;forAll(e|Set {TaskNode, OutputNode, CreateRequestNode, CallNode, ResetNode, SetNode}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a286'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a174'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a289' name = 'DashNextstate' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a290'/>
            <Model:Constraint xmi.idref = 'a291'/>
            <Model:Constraint xmi.idref = 'a292'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a290' name = 'DashNextstateMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DashNextstate&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a289'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a291' name = 'DashNextstateMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DashNextstate&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a289'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a292' name = 'DashNextstateMustNotHaveTransitions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DashNextstate&#10;&#10;inv:  self.selectors-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a289'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a167'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a293' name = 'ReturnNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a294'/>
            <Model:Constraint xmi.idref = 'a295'/>
            <Model:Constraint xmi.idref = 'a296'/>
            <Model:Constraint xmi.idref = 'a297'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a294' name = 'ReturnNodeMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ReturnNode&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a293'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a295' name = 'ReturnNodeMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ReturnNode&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a293'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a296' name = 'ReturnNodeMustNotHaveTransitions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ReturnNode&#10;&#10;inv:  self.selectors-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a293'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Reference xmi.id = 'a298' name = 'returnExpression' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a300'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a297' name = 'ReturnNodeMustHaveProperType'
              annotation = 'TYPE=&apos;sdl abstract syntax&apos;' expression = 'context  ReturnNode&#10;&#10;inv:  let procedure: TypedElement = container.bodiedElement.oclAsType(TypedElement) in procedure.type-&gt;size = self.returnExpression-&gt;size and (returnExpression-&gt;size = 1 implies self.returnExpression.determineType() = procedure.type)'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a293'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a173'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a301' name = 'ReturnExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a302' name = 'returnNode' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a293'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a300' name = 'returnExpression' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a303' name = 'DecisionNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a304'/>
            <Model:Constraint xmi.idref = 'a305'/>
            <Model:Constraint xmi.idref = 'a306'/>
            <Model:Constraint xmi.idref = 'a307'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a304' name = 'DecisionNodeMustNotHaveEntryActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DecisionNode&#10;&#10;inv:  self.entryActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a303'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a305' name = 'DecisionNodeMustNotHaveExitActions'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DecisionNode&#10;&#10;inv:  self.exitActions-&gt;isEmpty'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a303'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a306' name = 'SelectorsOfDecisionNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DecisionNode&#10;&#10;inv:  self.selectors-&gt;forAll(e|Set {DecisionAnswer, ElseAnswer}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a303'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a307' name = 'QuestionOfDecisionNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DecisionNode&#10;&#10;inv:  self.question.oclIsKindOf(OclAny) implies Set {SdlExpression}-&gt;exists(t:OclType|self.question.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a303'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a169'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a308' name = 'DecisionAnswer' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a309'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a310' name = 'condition' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a311'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a312'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a309' name = 'TransitionOfDecisionAnswerMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  DecisionAnswer&#10;&#10;inv:  self.transition.oclIsKindOf(OclAny) implies Set {SdlTransition}-&gt;exists(t:OclType|self.transition.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a308'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a163'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a313' name = 'AnswerCondition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a314' name = 'answer' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a308'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a312' name = 'condition' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a311'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a315' name = 'ElseAnswer' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a316'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a316' name = 'TransitionOfElseAnswerMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ElseAnswer&#10;&#10;inv:  self.transition.oclIsKindOf(OclAny) implies Set {SdlTransition}-&gt;exists(t:OclType|self.transition.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a315'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a163'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a317' name = 'TaskNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a318' name = 'assignment' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a319'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a320'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a161'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a321' name = 'Assignments' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a322' name = 'task' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a317'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a320' name = 'assignment' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a319'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a323' name = 'CreateRequestNode' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a324'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a324' name = 'CreateRequestNodeMustHaveAgentDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  CreateRequestNode&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {AgentDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a323'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a161'/>
            <Model:Class xmi.idref = 'a17'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a325' name = 'CallNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a326'/>
            <Model:Constraint xmi.idref = 'a327'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a326' name = 'ArgumentsOfCallNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  CallNode&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a325'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a327' name = 'CallNodeMustHaveProcedureDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  CallNode&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ProcedureDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a325'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a161'/>
            <Model:Class xmi.idref = 'a118'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a328' name = 'ValueReturningCallNode' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a325'/>
            <Model:Class xmi.idref = 'a299'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a329' name = 'OutputNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a330'/>
            <Model:Constraint xmi.idref = 'a331'/>
            <Model:Constraint xmi.idref = 'a332'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a333' name = 'viaGate' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a237'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a334'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a330' name = 'IncompleteInterface' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  OutputNode&#10;&#10;inv:  self.items-&gt;forAll(item|self.determineClassifier().thisInterfaces-&gt;exists(type.oclAsType(InterfaceType).send-&gt;includes(item)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a329'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a331' name = 'OutputNodeMustHaveSignalDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  OutputNode&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {SignalDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a329'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a332' name = 'ArgumentsOfOutputNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  OutputNode&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a329'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a161'/>
            <Model:Class xmi.idref = 'a35'/>
            <Model:Class xmi.idref = 'a120'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a335' name = 'OutputVia' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a336' name = 'output' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a329'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a334' name = 'viaGate' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a237'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a337' name = 'ResetNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a338'/>
            <Model:Constraint xmi.idref = 'a339'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a338' name = 'ArgumentsOfResetNodeMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ResetNode&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a337'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a339' name = 'ResetNodeMustHaveTimerDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ResetNode&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {TimerDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a337'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a161'/>
            <Model:Class xmi.idref = 'a35'/>
            <Model:Class xmi.idref = 'a120'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a340' name = 'SetNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a341'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a342' name = 'timeExpression' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a343'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a341' name = 'SetNodeTimeExpressionMustBeOfPredefinedTypeTime'
              annotation = 'TYPE=&apos;sdl abstract syntax&apos;' expression = 'context  SetNode&#10;&#10;inv:  timeExpression-&gt;size = 0 or (Sequence { &apos;predefined&apos;, &apos;Time&apos;}) = timeExpression.determineType().qualifiedName'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a340'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a337'/>
            <Model:Class xmi.idref = 'a120'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a344' name = 'TimeExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a345' name = 'set' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a340'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a343' name = 'timeExpression' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a346' name = 'ValueDataTypeDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a347'/>
            <Model:Constraint xmi.idref = 'a348'/>
            <Model:Constraint xmi.idref = 'a349'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a347' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  ValueDataTypeDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a346'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a348' name = 'ValueDataTypeDefinitionMustOnlyContain'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ValueDataTypeDefinition&#10;&#10;inv:  self.contents-&gt;forAll(e|Set {OperationSignature}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a346'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a349' name = 'LiteralsOfValueDataTypeDefinitionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  ValueDataTypeDefinition&#10;&#10;inv:  self.literals-&gt;forAll(e|Set {LiteralSignature}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a346'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a112'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a248' name = 'VariableDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a350'/>
            <Model:Constraint xmi.idref = 'a351'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a350' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  VariableDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a248'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a351' name = 'VariableDefinitionMustHaveValueDataTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  VariableDefinition&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ValueDataTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a248'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a114'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a352' name = 'VariableWithInitDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a353'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a353' name = 'ExpressionOfVariableWithInitDefinitionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  VariableWithInitDefinition&#10;&#10;inv:  self.assignmentExpression.oclIsKindOf(OclAny) implies Set {SdlExpression}-&gt;exists(t:OclType|self.assignmentExpression.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a352'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a248'/>
            <Model:Class xmi.idref = 'a115'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a354' name = 'TimerDefinition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a355'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a356' name = 'OperationSignature' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a357'/>
            <Model:Constraint xmi.idref = 'a358'/>
            <Model:Constraint xmi.idref = 'a359'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a357' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  OperationSignature&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a356'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a358' name = 'OperationSignatureMustHaveDestinctParameterType'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  OperationSignature&#10;&#10;inv:  self.parameters-&gt;forAll(e|Set {SortReferenceIdentifier}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a356'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a359' name = 'OperationSignatureMustHaveValueDataTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  OperationSignature&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ValueDataTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a356'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a111'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a360' name = 'LiteralSignature' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a361'/>
            <Model:Constraint xmi.idref = 'a362'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a361' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  LiteralSignature&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a360'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a362' name = 'LiteralSignatureMustHaveValueDataTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  LiteralSignature&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ValueDataTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a360'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a110'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a311' name = 'RangeCondition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a363' name = 'conditions' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a364'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a365'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a366' name = 'Conditions' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a367' name = 'range' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a311'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a365' name = 'conditions' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a364'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a364' name = 'ConditionItem' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a9'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a368' name = 'OpenRange' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a369'/>
            <Model:Constraint xmi.idref = 'a370'/>
            <Model:Constraint xmi.idref = 'a371'/>
            <Model:Constraint xmi.idref = 'a372'/>
            <Model:Constraint xmi.idref = 'a373'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a374' name = 'expression' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a375'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a376' name = 'decision' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a169'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a377'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Constraint xmi.id = 'a369' name = 'OpenRangeExpressionIsAlwaysConstant'
              annotation = 'TYPE=&apos;sdl abstract syntax&apos;' expression = 'context  OpenRange&#10;&#10;inv:  self.expression.constant'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a368'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a370' name = 'OpenRangeOperatorMustBeBinary'
              annotation = 'TYPE=&apos;sdl abstract syntax&apos;' expression = 'context  OpenRange&#10;&#10;inv:  self.type.oclAsType(SignaturedElement).parameters-&gt;size = 2'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a368'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a371' name = 'OpenRangeTypeSafity' annotation = 'TYPE=&apos;sdl abstract syntax&apos;'
              expression = 'context  OpenRange&#10;&#10;inv:  let operation: SignaturedElement = self.type.oclAsType(SignaturedElement) in operation.parameters-&gt;at(1).type = self.decision.question.determineType() and operation.parameters-&gt;at(2).type = self.expression.determineType()'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a368'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a372' name = 'OpenRangeOperatorMustBeABooleanOperator'
              annotation = 'TYPE=&apos;sdl abstract syntax&apos;' expression = 'context  OpenRange&#10;&#10;inv:  self.type.oclAsType(TypeReference).type.oclAsType(NamedElement).qualifiedName = (Sequence { &apos;predefined&apos;, &apos;Boolean&apos;})'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a368'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a373' name = 'OpenRangeMustHaveOperationSignature'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  OpenRange&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {OperationSignature}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a368'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a364'/>
            <Model:Class xmi.idref = 'a18'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a378' name = 'OpenRangeExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a379' name = 'range' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a375' name = 'expression' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a380' name = 'DecisionForOpenRange' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a381' name = 'OpenRange' isNavigable = 'false'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a377' name = 'decision' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a169'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a382' name = 'ClosedRange' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a383' name = 'lowerRange' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a384'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a385' name = 'upperRange' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a386'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a364'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a387' name = 'LowerRange' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a388' name = 'closedRange' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a382'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a384' name = 'lowerRange' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a389' name = 'UpperRange' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a390' name = 'closedRange' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a382'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a386' name = 'upperRange' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a368'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a299' name = 'SdlExpression' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a391' name = 'SdlLiteral' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a392'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a392' name = 'LiteralOfSdlLiteralMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlLiteral&#10;&#10;inv:  self.literal.oclIsKindOf(OclAny) implies Set {LiteralSignature}-&gt;exists(t:OclType|self.literal.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a391'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a116'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a393' name = 'EqualityExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a394'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a394' name = 'ArgumentsOfEqualityExpressionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  EqualityExpression&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a393'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a118'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a395' name = 'ConditionalExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a396' name = 'condition' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a397'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a398' name = 'consequence' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a399'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a400' name = 'alternative' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a401'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a402' name = 'Condition' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a403' name = 'conditionalExpression' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a395'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a397' name = 'condition' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a404' name = 'Consequence' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a405' name = 'conditionalExpression' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a395'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a399' name = 'consequence' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a406' name = 'Alternative' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a407' name = 'conditionalExpression' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a395'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a401' name = 'alternative' isNavigable = 'true'
              aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a299'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Class xmi.id = 'a408' name = 'SdlOperationApplication' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a409'/>
            <Model:Constraint xmi.idref = 'a410'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a409' name = 'ArgumentsOfSdlOperationApplicationMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlOperationApplication&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a408'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a410' name = 'SdlOperationApplicationMustHaveOperationSignature'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlOperationApplication&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {OperationSignature}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a408'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a118'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a411' name = 'SdlVariableAccess' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a412'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a412' name = 'VariableOfSdlVariableAccessMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlVariableAccess&#10;&#10;inv:  self.variable.oclIsKindOf(OclAny) implies Set {VariableDefinition}-&gt;exists(t:OclType|self.variable.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a411'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a117'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a319' name = 'SdlAssignment' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a413'/>
            <Model:Constraint xmi.idref = 'a414'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a413' name = 'VariableOfSdlAssignmentMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlAssignment&#10;&#10;inv:  self.variable.oclIsKindOf(OclAny) implies Set {VariableDefinition}-&gt;exists(t:OclType|self.variable.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a319'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a414' name = 'ExpressionOfSdlAssignmentMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SdlAssignment&#10;&#10;inv:  self.assignmentExpression.oclIsKindOf(OclAny) implies Set {SdlExpression}-&gt;exists(t:OclType|self.assignmentExpression.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a319'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a115'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a415' name = 'ImperativeExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a416' name = 'PidExpression' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a415'/>
            <Model:Class xmi.idref = 'a113'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a417' name = 'SelfExpression' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a416'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a418' name = 'ParentExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a416'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a419' name = 'OffspringExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a416'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a420' name = 'SenderExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a416'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a421' name = 'TimerActiveExpression' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a422'/>
            <Model:Constraint xmi.idref = 'a423'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a422' name = 'TimerActiveExpressionMustHaveTimerDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  TimerActiveExpression&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {TimerDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a421'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a423' name = 'ArgumentsOfTimerActiveExpressionMustOnlyBe'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  TimerActiveExpression&#10;&#10;inv:  self.operands-&gt;forAll(e|Set {SdlExpression}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a421'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a113'/>
            <Model:Class xmi.idref = 'a337'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a424' name = 'NowExpression' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a415'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a355' name = 'SignalDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a425'/>
            <Model:Constraint xmi.idref = 'a426'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a425' name = 'NameAttributeIsMandatory' annotation = 'TYPE=&apos;abstract model element&apos;'
              expression = 'context  SignalDefinition&#10;&#10;inv:  self.name-&gt;size &gt;= 1'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a355'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <Model:Constraint xmi.id = 'a426' name = 'SignalDefinitionMustHaveDestinctParameterType'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SignalDefinition&#10;&#10;inv:  self.parameters-&gt;forAll(e|Set {SortReferenceIdentifier}-&gt;exists(t:OclType| e.oclIsKindOf(t)))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a355'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a23'/>
            <Model:Class xmi.idref = 'a37'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a427' name = 'SortReferenceIdentifier' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a428'/>
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <Model:Constraint xmi.id = 'a428' name = 'SortReferenceIdentifierMustHaveValueDataTypeDefinition'
              annotation = 'TYPE=&apos;specialisation&apos;' expression = 'context  SortReferenceIdentifier&#10;&#10;inv:  self.type.oclIsKindOf(OclAny) implies Set {ValueDataTypeDefinition}-&gt;exists(t:OclType|self.type.oclIsKindOf(t))'
              language = 'OCL' evaluationPolicy = 'deferred'>
              <Model:Constraint.constrainedElements>
                <Model:Class xmi.idref = 'a427'/>
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a18'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a429' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a214'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a430' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a214'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a431' name = 'SdlPlusConcreteSyntaxExtensions'
      annotation = '' isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Class xmi.id = 'a432' name = 'StringReference' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a433'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a434' name = 'com.urep.jcr.transient=true' annotation = ''
          tagId = 'com.urep.jcr.transient'>
          <Model:Tag.values>true</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Class xmi.idref = 'a432'/>
            <Model:Class xmi.idref = 'a435'/>
            <Model:Class xmi.idref = 'a436'/>
            <Model:Class xmi.idref = 'a437'/>
            <Model:EnumerationType xmi.idref = 'a438'/>
            <Model:Class xmi.idref = 'a439'/>
            <Model:EnumerationType xmi.idref = 'a440'/>
            <Model:Class xmi.idref = 'a441'/>
            <Model:Class xmi.idref = 'a433'/>
            <Model:Class xmi.idref = 'a442'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Class xmi.id = 'a435' name = 'Identifier' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a443' name = 'qualifier' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a436'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a444'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Attribute xmi.id = 'a445' name = 'name' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a7'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a432'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a436' name = 'Qualifier' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a446' name = 'pathItems' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a437'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a447'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a437' name = 'PathItem' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a448' name = 'name' annotation = '' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:PrimitiveType xmi.idref = 'a7'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <Model:Attribute xmi.id = 'a449' name = 'scopeUnitKind' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a438'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a438' name = 'ScopeUnitKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>Package</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>System</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>SystemType</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>Block</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>BlockType</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>Process</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>ProcessType</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>State</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>StateType</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>Procedure</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>Signal</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Class xmi.id = 'a439' name = 'ChannelEndPointBinding' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a450' name = 'agentIdentifier' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a451'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Reference xmi.id = 'a452' name = 'gateIdentifier' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a453'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <Model:Attribute xmi.id = 'a454' name = 'channelEndPointKind' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'
              isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:EnumerationType xmi.idref = 'a440'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a433'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:EnumerationType xmi.id = 'a440' name = 'ChannelEndPointKind' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
          <Model:EnumerationType.labels>Agent</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>This</Model:EnumerationType.labels>
          <Model:EnumerationType.labels>Env</Model:EnumerationType.labels>
        </Model:EnumerationType>
        <Model:Class xmi.id = 'a441' name = 'LiteralOrVariableAccess' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Reference xmi.id = 'a455' name = 'literalOrVariable' annotation = ''
              scope = 'instance_level' visibility = 'public_vis' isChangeable = 'true'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a433'/>
            <Model:Class xmi.idref = 'a299'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a433' name = 'ConcreteSyntaxExtension' annotation = ''
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a442' name = 'PlaceHolder' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Association xmi.id = 'a457' name = 'QualifiedBy' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a458' name = 'identifier' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a444' name = 'qualifier' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a436'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a459' name = 'PathItems' annotation = '' isRoot = 'true'
          isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a460' name = 'qualifier' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a436'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a447' name = 'pathItems' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>-1</XMI.field>
                <XMI.field>true</XMI.field>
                <XMI.field>true</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a437'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a461' name = 'ChannelEndPointAgent' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a462' name = 'binding' annotation = '' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a439'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a451' name = 'agentIdentifier' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a463' name = 'ChannelEndPointGate' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a464' name = 'binding' annotation = '' isNavigable = 'false'
              aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a439'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a453' name = 'gateIdentifier' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Association xmi.id = 'a465' name = 'LiteralOrVariable' annotation = ''
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis'
          isDerived = 'false'>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456' name = 'literalOrVariable' annotation = ''
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a435'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a466' name = 'literalOrVariableAccess' annotation = ''
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true'>
              <Model:AssociationEnd.multiplicity>
                <XMI.field>1</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a441'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <Model:Import xmi.id = 'a467' name = 'PrimitiveTypes' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a11'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a468' name = 'SdlPlus' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a214'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a469' name = 'Common' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a470' name = 'CommonBehaviour' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a160'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a471' name = 'CommonData' annotation = '' visibility = 'public_vis'
          isClustered = 'false'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Class xmi.id = 'a472' name = 'AnyDecisionNode' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a303'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a473' name = 'CsePlaceHolderForState' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a474' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a171'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a475' name = 'CsePlaceHolderForComItem' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a476' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a37'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a477' name = 'CsePlaceHolderForGeneralizableElement'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'
          isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a478' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a14'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a479' name = 'CsePlaceHolderForNamedElement' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a480' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a4'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a481' name = 'CsePlaceHolderForVariable' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a482' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a114'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a483' name = 'CsePlaceHolderForInterface' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a484' name = 'channelEndPointBinding' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a439'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a33'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a485' name = 'CsePlaceHolderForGateDefinition' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a486' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a237'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a487' name = 'CsePlaceHolderForLiteral' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a488' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a110'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a489' name = 'CsePlaceHolderForSymbol' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a490' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a491' name = 'CsePlaceHolderForSelector' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a492' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a168'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a493' name = 'CsePlaceHolderForInterfaceType' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a494' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a38'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Class xmi.id = 'a495' name = 'CsePlaceHolderForSplit' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' isSingleton = 'false'>
          <Model:Namespace.contents>
            <Model:Attribute xmi.id = 'a496' name = 'stringReference' scope = 'instance_level'
              visibility = 'public_vis' isChangeable = 'true' isDerived = 'false'>
              <Model:StructuralFeature.multiplicity>
                <XMI.field>0</XMI.field>
                <XMI.field>1</XMI.field>
                <XMI.field>false</XMI.field>
                <XMI.field>false</XMI.field>
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Class xmi.idref = 'a432'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
          <Model:GeneralizableElement.supertypes>
            <Model:Class xmi.idref = 'a169'/>
            <Model:Class xmi.idref = 'a442'/>
            <Model:Class xmi.idref = 'a28'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <Model:Tag xmi.id = 'a497' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a431'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a498' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a431'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a11' name = 'PrimitiveTypes' annotation = '' isRoot = 'false'
      isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:PrimitiveType xmi.id = 'a58' name = 'Boolean' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a499' name = 'Double' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a500' name = 'Float' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a105' name = 'Integer' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a501' name = 'Long' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
        <Model:PrimitiveType xmi.id = 'a7' name = 'String' annotation = '' isRoot = 'false'
          isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis'/>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Package xmi.id = 'a502' name = 'SdlM2WCSE' isRoot = 'false' isLeaf = 'false'
      isAbstract = 'false' visibility = 'public_vis'>
      <Model:Namespace.contents>
        <Model:Import xmi.id = 'a503' name = 'Common' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a1'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a504' name = 'CommonBehaviour' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a160'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a505' name = 'CommonData' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a107'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a506' name = 'SdlPlus' annotation = '' visibility = 'public_vis'
          isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a214'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Import xmi.id = 'a507' name = 'SdlPlusConcreteSyntaxExtensions' annotation = ''
          visibility = 'public_vis' isClustered = 'true'>
          <Model:Import.importedNamespace>
            <Model:Package xmi.idref = 'a431'/>
          </Model:Import.importedNamespace>
        </Model:Import>
        <Model:Tag xmi.id = 'a508' name = 'javax.jmi.packagePrefix=hub.metamodels'
          annotation = '' tagId = 'javax.jmi.packagePrefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a502'/>
          </Model:Tag.elements>
        </Model:Tag>
        <Model:Tag xmi.id = 'a509' name = 'omg.org.mof.idl_prefix=hub.metamodels'
          annotation = '' tagId = 'org.omg.mof.idl_prefix'>
          <Model:Tag.values>hub.sam.models</Model:Tag.values>
          <Model:Tag.elements>
            <Model:Package xmi.idref = 'a502'/>
          </Model:Tag.elements>
        </Model:Tag>
      </Model:Namespace.contents>
    </Model:Package>
  </XMI.content>
</XMI>
