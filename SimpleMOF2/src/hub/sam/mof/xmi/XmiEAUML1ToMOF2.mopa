/*
A MOF 2 Java -- The MOF Repository tool for Java
Copyright (C) 2005 Markus Scheidgen

    This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by the
Free Software Foundation; either version 2.1 of the License, or any later
version.

    This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

    You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

package hub.sam.mof.xmi;

import java.util.*;
import hub.sam.mof.instancemodel.*;
import hub.sam.mof.xmi.mopa.*;

public class XmiEAUML1ToMOF2 implements XmiTransformator {

	private ClassInstance<XmiClassifier,String,String> getInstanceValue(ClassInstance<XmiClassifier,String,String> from, String key, int index) {
		return from.get(key).getValues().get(index).asInstanceValue().getInstance();
	}

	private String getUnspecifiedValue(ClassInstance<XmiClassifier,String,String> from, String key, int index) {
		if (from == null || from.get(key) == null || from.get(key).getValues().get(index) == null || from.get(key).getValues().get(index).asUnspecifiedValue() == null) {
			return null;
		}
        try {
    		return (String)from.get(key).getValues().get(index).asUnspecifiedValue().getUnspecifiedData();
        } catch (NullPointerException e) {
            return null;
        }
	}

	private void removeAttribute(ClassInstance<XmiClassifier,String,String> from, String attr) {
		if (from.get(attr) != null) {
            if (from.get(attr).getValues().size() > 0) {
				for(ValueSpecification<XmiClassifier,String,String> value: from.get(attr).getValues()) {
					if (value.asInstanceValue() != null) {
						value.asInstanceValue().getInstance().setComposite(null);
					}
				}
			    from.get(attr).getValues().clear();
            }
		}
	}

	private final InstanceModel<XmiClassifier,String,String> model;
	private List<ClassInstance<XmiClassifier,String,String> > tlElements = null;

	public XmiEAUML1ToMOF2(InstanceModel<XmiClassifier,String,String> model) {
		this.model = model;
        this.tlElements = new Vector();
		for(ClassInstance<XmiClassifier,String,String> instance: model.getInstances()) {
			instance.getClassifier().setNamespacePrefix("cmof");
		}
	}

    public Collection<ClassInstance<XmiClassifier,String,String> > getTopLevelElements() {
        return tlElements;
    }

    public pattern void transform() throws XmiException {
        m=Model(dt=DataType) -> {
            m.get("ownedElement").getValues().remove(dt);
			dt.setComposite(null);
            //tlElements.add(dt);
        }

        m=Model -> {
        	dive;
        	if (tlElements.size() == 0) {
        		throw new XmiException("Xmi does not contain a meta-model");
        	}
        }

		/*
		m=Model(c=Class) provided (getUnspecifiedValue(c, "name", 0).equals("EARootClass")) -> {
			m.get("ownedElement").getValues().remove(model.createInstanceValue(c));
		}*/

        p=Package(e=ownedElement:Association.Class.DataType.PrimitiveType.Enumeration) -> {
        	p.get("ownedElement").getValues().remove(model.createInstanceValue(e));
        	p.addValue("ownedType", model.createInstanceValue(e));
        }

        p=Package(e=Comment) -> {
        	p.get("ownedElement").getValues().remove(model.createInstanceValue(e));
        	p.addValue("ownedComment", model.createInstanceValue(e));

        }

        p=Package(np=ownedElement:Package) -> {
            p.get("ownedElement").getValues().remove(model.createInstanceValue(np));
            p.addValue("nestedPackage", model.createInstanceValue(np));
        }

        p=Package(generalisation=Generalization) -> {
			String subtypeId = getUnspecifiedValue(generalisation, "subtype", 0);
			ClassInstance<XmiClassifier,String,String> theClass = model.getInstance(subtypeId);
            String ids = getUnspecifiedValue(generalisation, "supertype", 0);
            if (ids.contains(" ")) {
                for(String id: ids.split(" ")) {
                    theClass.addValue("superClass", model.createInstanceValue(model.getInstance(id)));
                }
            } else {
                theClass.addValue("superClass", model.createInstanceValue(model.getInstance(ids)));
            }
            p.get("ownedElement").getValues().remove(model.createInstanceValue(generalisation));
        }

        p=Package(element=Constraint.Dependency.Collaboration) -> {
        	p.get("ownedElement").getValues().remove(model.createInstanceValue(element));
			element.setComposite(null);
        }

		p=Package(ref=Stereotype) -> {
			ClassInstance<XmiClassifier,String,String> s = model.getInstance(getUnspecifiedValue(ref,"xmi.idref",0));
			String name = getUnspecifiedValue(s,"name",0);
	   		p.get("stereotype").getValues().remove(model.createInstanceValue(ref));

			if (name.equals("metamodel")) {
				removeAttribute(p, "taggedValue");
				removeAttribute(p, "visibility");
				removeAttribute(p, "isSpecification");
				removeAttribute(p, "namespace");
				removeAttribute(p, "isAbstract");
				removeAttribute(p, "isLeaf");
				removeAttribute(p, "isRoot");
	            removeAttribute(p, "clientDependency");
	            removeAttribute(p, "supplierDependency");

				dive;

				p.setComposite(null);
				tlElements.add(p);
				break pattern;
			}
			if (name.equals("model")) {
				dive;
				p.setComposite(null);
				break pattern;
			}
		}

		p=Package -> {
			removeAttribute(p, "visibility");
			removeAttribute(p, "isSpecification");
			removeAttribute(p, "namespace");
			removeAttribute(p, "isAbstract");
			removeAttribute(p, "isLeaf");
			removeAttribute(p, "isRoot");
            removeAttribute(p, "clientDependency");
            removeAttribute(p, "supplierDependency");
			removeAttribute(p, "taggedValue");

			dive;
        }

		c=Class(s=Stereotype) provided (getUnspecifiedValue(s,"name",0).equals("enumeration")) -> {
			c.getClassifier().setName("Enumeration");
			c.get("taggedValue").getValues().clear();
			removeAttribute(c, "taggedValue");
			dive;
		}

		end=AssociationEnd(tv=taggedValue:TaggedValue) provided ( getUnspecifiedValue(tv, "tag", 0).equals("constraint")) -> {
			end.addValue("details", tv.get("value").getValues().get(0));
		}

        a=Association (end1=connection:AssociationEnd, end2=connection:AssociationEnd) provided (end1 != end2) -> {
        	InstanceValue<XmiClassifier,String,String> end1Value = model.createInstanceValue(end1);
        	InstanceValue<XmiClassifier,String,String> end2Value = model.createInstanceValue(end2);

        	end1.addValue("opposite", end2Value);
        	end2.addValue("opposite", end1Value);
        	a.addValue("memberEnd", end1Value);
           	a.addValue("memberEnd", end2Value);
			dive;
			a.get("connection").getValues().remove(end1Value);
			a.get("connection").getValues().remove(end2Value);

            removeAttribute(a, "isLeaf");
            removeAttribute(a, "isRoot");
            removeAttribute(a, "isAbstract");
            removeAttribute(a, "isSpecification");
			removeAttribute(a, "taggedValue");

			break pattern;
        }

        property=AssociationEnd.Attribute provided (getUnspecifiedValue(property,"multiplicity",0) != null) -> {
        	String mul = getUnspecifiedValue(property,"multiplicity",0);
        	if (mul.equals("0..1")) {
               	property.addValue("upper", model.createPrimitiveValue("1"));
        		property.addValue("lower", model.createPrimitiveValue("0"));
        	} else if (mul.equals("1..*")) {
               	property.addValue("upper", model.createPrimitiveValue("-1"));
        		property.addValue("lower", model.createPrimitiveValue("1"));
        	} else if (mul.equals("0..*")) {
               	property.addValue("upper", model.createPrimitiveValue("-1"));
        		property.addValue("lower", model.createPrimitiveValue("0"));
        	} else if (mul.equals("1")) {
	        	property.addValue("upper", model.createPrimitiveValue("1"));
        		property.addValue("lower", model.createPrimitiveValue("1"));
        	} else {
               	property.addValue("upper", model.createPrimitiveValue(mul));
        		property.addValue("lower", model.createPrimitiveValue(mul));
        	}
			removeAttribute(property, "multiplicity");
        }

        property=Attribute -> {
        	for(ValueSpecification<XmiClassifier,String,String> value: property.get("taggedValue").getValues()) {
        		String tag = getUnspecifiedValue(value.asInstanceValue().getInstance(), "tag",0);
				if (tag.equals("upperBound")) {
					property.addValue("upper", value.asInstanceValue().getInstance().get("value").getValues().get(0));
				}
				if (tag.equals("lowerBound")) {
					property.addValue("lower", value.asInstanceValue().getInstance().get("value").getValues().get(0));
				}
				if (tag.equals("ordered")) {
				    property.addValue("isOrdered",
				        (value.asInstanceValue().getInstance().get("value").getValues().get(0).asUnspecifiedValue().getUnspecifiedData()).equals("1")? model.createPrimitiveValue("true") : model.createPrimitiveValue("false"));
				}
				if (tag.equals("derived")) {
				    property.addValue("isDerived",
				        (value.asInstanceValue().getInstance().get("value").getValues().get(0).asUnspecifiedValue().getUnspecifiedData()).equals("1")? model.createPrimitiveValue("true") : model.createPrimitiveValue("false"));
				}
				if (tag.equals("duplicates")) {
				    property.addValue("isUnique",
				        (value.asInstanceValue().getInstance().get("value").getValues().get(0).asUnspecifiedValue().getUnspecifiedData()).equals("0")? model.createPrimitiveValue("true") : model.createPrimitiveValue("false"));
				}
        	}
        }

        property=AssociationEnd.Attribute(Multiplicity(range=MultiplicityRange)) -> {
        	property.addValue("upper", range.get("upper").getValues().get(0));
        	property.addValue("lower", range.get("lower").getValues().get(0));
			removeAttribute(property, "multiplicity");
        }

        property=Attribute(expr=initialValue:Expression) -> {
            String body = getUnspecifiedValue(expr, "body", 0);
            if (! new String("").equals(body) && body != null) {
                property.addValue("default", model.createPrimitiveValue(body));
            }
            removeAttribute(property, "initialValue");
        }

        property=AssociationEnd -> {
			boolean isNavigable = false;
			if (property.get("isNavigable") != null) {
				isNavigable = Boolean.TRUE.toString().equals(getUnspecifiedValue(property,"isNavigable",0));
			}

        	if (!isNavigable) {
      			ClassInstance<XmiClassifier,String,String> association = (ClassInstance)mopaNode.getParent().getElement();
      			association.addValue("ownedEnd", model.createInstanceValue(property));
      			property.changeComposite(association);
        	} else {
        		ClassInstance<XmiClassifier,String,String> theClass =
                        model.getInstance(getUnspecifiedValue(getInstanceValue(property, "opposite", 0), "type", 0));
        		theClass.addValue("ownedAttribute", model.createInstanceValue(property));
        		property.changeComposite(theClass);
        	}
        }

        property=AssociationEnd.Attribute -> {
        	property.getClassifier().setName("Property");
        	property.getClassifier().setNamespacePrefix("cmof");

        	if (new String("ordered").equals(getUnspecifiedValue(property, "ordering", 0))) {
        		property.addValue("isOrdered", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}
        	if (new String("composite").equals(getUnspecifiedValue(property, "aggregation", 0))) {
        		getInstanceValue(property, "opposite", 0).addValue("isComposite", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}
        	if (new String("unchangeable").equals(getUnspecifiedValue(property, "changeability", 0))) {
        		property.addValue("isReadOnly", model.createPrimitiveValue(Boolean.TRUE.toString()));
        	}
			if (new String("frozen").equals(getUnspecifiedValue(property, "changeable",0))) {
				property.addValue("isReadOnly", model.createPrimitiveValue(Boolean.TRUE.toString()));
			}

            String name = getUnspecifiedValue(property, "name", 0);
            if (name != null && name.startsWith("/")) {
                property.addValue("isDerived", model.createPrimitiveValue(Boolean.TRUE.toString()));
                removeAttribute(property, "name");
                property.addValue("name", model.createPrimitiveValue(name.substring(1, name.length())));
            }

			removeAttribute(property, "taggedValue");
        }

		feature=Property.Operation.Parameter provided (feature.get("type") != null && feature.get("type").getValues().size() > 0 &&
				feature.get("type").getValues().get(0).asInstanceValue() != null) -> {
			String id = getUnspecifiedValue(feature.get("type").getValues().get(0).asInstanceValue().getInstance(), "xmi.idref", 0);
			ClassInstance<XmiClassifier,String,String> type = model.getInstance(id);
			if (type != null) {
				feature.get("type").getValues().set(0, model.createInstanceValue(type));
			}
		}

        feature=Property.Operation -> {
			removeAttribute(feature, "ordering");
			removeAttribute(feature, "aggregation");
			//removeAttribute(feature, "visibility");
			removeAttribute(feature, "targetScope");
			removeAttribute(feature, "ownerScope");
			removeAttribute(feature, "constraint");
			removeAttribute(feature, "changeability");
			removeAttribute(feature, "changeable");
			removeAttribute(feature, "isSpecification");
            removeAttribute(feature, "isNavigable");
            removeAttribute(feature, "isQuery");
            removeAttribute(feature, "concurrency");
            removeAttribute(feature, "isAbstract");
            removeAttribute(feature, "specification");
            removeAttribute(feature, "isRoot");
            removeAttribute(feature, "isLeaf");
			removeAttribute(feature, "initialValue");
			dive;
        }

        op=Operation(param=parameter:Parameter) -> {
			param.getClassifier().setNamespacePrefix("cmof");
			dive; // for parameters
            op.get("parameter").getValues().remove(model.createInstanceValue(param));
            if (new String("return").equals(getUnspecifiedValue(param, "kind", 0))) {
                op.addValue("returnResult", model.createInstanceValue(param));
				ClassInstance<XmiClassifier,String,String> type = param.get("type").getValues().get(0).asInstanceValue().getInstance();
				op.addValue("type", model.createInstanceValue(type));
            } else {
                op.addValue("formalParameter", model.createInstanceValue(param));
            }
			removeAttribute(param, "visibility");
			removeAttribute(param, "isSpecification");
            removeAttribute(param, "kind");
            removeAttribute(param, "defaultValue");
			removeAttribute(param, "taggedValue");
        }

		element=Package.Class.Enumeration.Association.Attribute.Operation.AssociationEnd.Property -> {
			removeAttribute(element, "taggedValue");
			removeAttribute(element, "stereotype");
		}

		element=Package.Class.Enumeration.Association.Attribute.Operation.AssociationEnd.Property(s=ownedElement:Stereotype) -> {
			element.get("ownedElement").getValues().remove(s);
		}


        theClass=Class.DataType(attribute=Attribute) -> {
            theClass.get("feature").getValues().remove(model.createInstanceValue(attribute));
            theClass.addValue("ownedAttribute", model.createInstanceValue(attribute));
        }

        enumeration=Enumeration(attr=Attribute.Property) -> {
            enumeration.get("feature").getValues().remove(model.createInstanceValue(attr));
            ClassInstance<XmiClassifier,String,String> literal = model.createInstance(null,
                    new XmiClassifier("EnumerationLiteral", "cmof"), enumeration);
            enumeration.addValue("ownedLiteral", model.createInstanceValue(literal));
            literal.addValue("name", model.createPrimitiveValue(getUnspecifiedValue(attr, "name", 0)));
        }


        theClass=Class.DataType.Enumeration -> {
			removeAttribute(theClass, "visibility");
			removeAttribute(theClass, "isSpecification");
			removeAttribute(theClass, "isActive");
			removeAttribute(theClass, "namespace");
			removeAttribute(theClass, "isLeaf");
			removeAttribute(theClass, "isRoot");
			removeAttribute(theClass, "specialization");
			removeAttribute(theClass, "generalization");
            removeAttribute(theClass, "clientDependency");
            removeAttribute(theClass, "supplierDependency");
			removeAttribute(theClass, "taggedValue");
            dive;
        }

        theClass=Class(op=feature:Operation) -> {
			op.getClassifier().setNamespacePrefix("cmof");
            theClass.get("feature").getValues().remove(model.createInstanceValue(op));
            theClass.addValue("ownedOperation", model.createInstanceValue(op));

        }

        dt=DataType -> {
            String name = getUnspecifiedValue(dt, "name", 0);
            if (new String("String").equals(name) ||
                    new String("Boolean").equals(name) ||
                    new String("Integer").equals(name) ||
                    new String("UnlimitedNatural").equals(name)) {
                dt.getClassifier().setName("PrimitiveType");
            }
        }

        c=Comment(tv=TaggedValue) provided (getUnspecifiedValue(tv, "tag", 0).equals("documentation")) -> {
        	c.addValue("body", tv.get("value").getValues().get(0));
        }

        c=Comment -> {
	        removeAttribute(c, "taggedValue");
	        removeAttribute(c, "visibility");
        	removeAttribute(c, "namespace");
      	    removeAttribute(c, "name");
        }

        default -> {
        }
    }
}
